==============================================================================
------------------------------------------------------------------------------
*KeySeer* See your keys and their keymaps

------------------------------------------------------------------------------
                                                               *KeySeer.setup()*
                           `KeySeer.setup`({config})
Plugin setup

Parameters~
{config} `(table|nil)` Module config table. See |KeySeer.config|.

Usage~
`require('keyseer').setup({})` (replace `{}` with your `config` table)

------------------------------------------------------------------------------
                                                                *KeySeer.config*
                                `KeySeer.config`
KeySeer Config

Default values:
>
  KeySeer.config = {
    -- Prints useful logs about what event are triggered, and reasons actions are executed.
    debug = false,
    -- Initial neovim mode to display keybindings
    initial_mode = "n",

    include_modifiers = true,
    -- Boolean to include built in keymaps in display
    include_builtin_keymaps = false,
    -- Boolean to include global keymaps in display
    include_global_keymaps = true,
    -- Boolean to include buffer keymaps in display
    include_buffer_keymaps = true,
    -- TODO: Represent modifier toggling in highlights
    -- Boolean to include modified keys (e.g. <C-x> or <A-y> or C) in display
    include_modified_keypresses = false,
    -- TODO: Support ignoring whichkey conflicts when showing builtin keymaps
    -- Boolean to ignore whichkey keymaps
    ignore_whichkey_conflicts = true,

    -- Configuration for ui:
    -- - `border` defines border (as in `nvim_open_win()`).
    ui = {
      border = "double", -- none, single, double, shadow
      margin = { 1, 0, 1, 0 }, -- extra window margin [top, right, bottom, left]
      winblend = 0, -- value between 0-100 0 for fully opaque and 100 for fully transparent
      size = {
        width = 65,
        height = 10,
      },
      icons = {
        keyseer = "",
      },
      show_header = true, -- boolean if the header should be shown
    },

    -- Keyboard options
    keyboard = {
      -- Layout of the keycaps
      ---@type string|Keyboard
      layout = "qwerty",
      keycap_padding = { 0, 1, 0, 1 }, -- padding around keycap labels [top, right, bottom, left]
      -- How much padding to highlight around each keycap
      highlight_padding = { 0, 0, 0, 0 },
      -- override the label used to display some keys.
      key_labels = {
        ["Up"] = "↑",
        ["Down"] = "↓",
        ["Left"] = "←",
        ["Right"] = "→",
        ["<F1>"] = "F1",
        ["<F2>"] = "F2",
        ["<F3>"] = "F3",
        ["<F4>"] = "F4",
        ["<F5>"] = "F5",
        ["<F6>"] = "F6",
        ["<F7>"] = "F7",
        ["<F8>"] = "F8",
        ["<F9>"] = "F9",
        ["<F10>"] = "F10",

        -- For example:
        -- ["<space>"] = "SPC",
        -- ["<cr>"] = "RET",
        -- ["<tab>"] = "TAB",
      },
    },
  }

  -- KeySeer functionality ========================================
  --
<

------------------------------------------------------------------------------
                                                                *KeySeer.show()*
                        `KeySeer.show`({mode}, {bufnr})
the keyseer ui
Parameters~
{mode} `(optional)` `(string)` the neovim mode to show keymaps for
{bufnr} `(optional)` buffer the buffer for buffer specific keymaps


==============================================================================
------------------------------------------------------------------------------
                                                                       *Display*
                                   `Display`
Class~
{Display}
Fields~
{mode} `(string)` The neovim mode for keymappings
{window} `(table)` The window options
{title} `(string)` The title of the display
{show_title} `(boolean)` Whether or not to show the title
{show_legend} `(boolean)` Whether or not to show the legend
{private} _keyboard Keyboard the keyboard layout
{private} _keymaps Keymaps The parsed neovim keymaps
Display is the main UI that shows to interact with the keyboards

------------------------------------------------------------------------------
                                                                 *Display:new()*
                             `Display:new`({opts})
a new Display
Parameters~
{opts} `(table)` Display options

------------------------------------------------------------------------------
                                                            *get_header_lines()*
                          `get_header_lines`({width})
to make the initial display buffer header
Parameters~
{width} `(number)` The width for the header
Return~
`(string[])` The lines in the header

------------------------------------------------------------------------------
                                                            *get_legend_lines()*
                          `get_legend_lines`({width})
to make the legend at the bottom

------------------------------------------------------------------------------
                                                              *_create_window()*
                    `_create_window`({lines}, {vim_options})
a vim window
Inspired by plenary.nvim
Parameters~
{lines} `(string[])` The lines to display in the window
{vim_options} `(table)` The options for the window
Return~
`(number)` win_id The id of the window that gets created

------------------------------------------------------------------------------
                                                                *Display:open()*
                                `Display:open`()
Open the main display window


==============================================================================
------------------------------------------------------------------------------
                                                               *Utils.justify()*
                       `Utils.justify`({width}, {words})
a list of strings
Parameters~
{width} `(number)` The width of the display
{words} `(string[])` The list of strings to justify
Return~
`(string)` The justified string

------------------------------------------------------------------------------
                                                       *Utils.parse_keystring()*
             `Utils.parse_keystring`({keystr}, {split_keypresses})
function to parse a keystring into a table of keycodes
Parameters~
{keystr} `(string)` The key string to be split
{split_keypresses} `(boolean?)` control if key presses are returned as a keypress or a table of keycaps
Return~
`(table)` Keycodes in the key string

------------------------------------------------------------------------------
                                                            *Utils.check_mode()*
                           `Utils.check_mode`({mode})
check the mode
Parameters~
{mode} `(string)` the mode

------------------------------------------------------------------------------
                                                                *Utils.notify()*
                         `Utils.notify`({msg}, {opts})
Parameters~
{msg} `(string|string[])`
{opts} `(optional)` `({lang?:string,)` title?:string, level?:number}

------------------------------------------------------------------------------
                                                                 *Utils.error()*
                          `Utils.error`({msg}, {opts})
Parameters~
{msg} `(string|string[])`
{opts} `(optional)` `({lang?:string,)` title?:string, level?:number}

------------------------------------------------------------------------------
                                                         *Utils.get_str_bytes()*
                  `Utils.get_str_bytes`({line}, {from}, {to})
the start column and end column in bytes
Parameters~
{line} `(string)` The string of characters to find byte positions
{from} `(number)` The start column
{to} `(number)` The end column
Return~
`(number)` start_col the start column in bytes
Return~
`(number)` end_col the end column in bytes


==============================================================================
------------------------------------------------------------------------------
                                                                      *Keyboard*
                                   `Keyboard`
Class~
{Keyboard}
Fields~
{padding} PaddingBox The spacing around each button keycap
{highlight_padding} PaddingBox The extra highlights around a keycap
{key_labels} `(table)` Keycap replacements
{shift_pressed} `(boolean)` Whether or not the shift button is pressed
{height} `(number)` The number of rows in the rendered keyboard
{width} `(number)` The number of columns in the rendered keyboard
{layout} PhysicalLayout The layout for the keyboard
{private} _normal_buttons Button[] A mapping `(table)` from keycode to button when shift is not pressed
{private} _shifted_buttons Button[] A mapping `(table)` from keycode to button when shift is pressed
{private} _normal_lines `(string[])` The string representation of the keyboard without shift pressed
{private} _shifted_lines `(string[])` The string representation of the keyboard with shift pressed
{private} _locations Button[] A `(table)` of buttons for their position

------------------------------------------------------------------------------
Class~
{KeyboardDisplayOptions}
Fields~
{padding} PaddingBox the spacing around each button keycap
{highlight_padding} PaddingBox the extra highlights around a keycap
{key_labels} `(string[])` A mapping table to replace a keycap with another label when output
{layout} `(optional)` PhysicalLayout The layout of buttons on the keyboard

------------------------------------------------------------------------------
Class~
{PhysicalKey}
Fields~
{normal} `(string)`
{shifted} `(string)`

------------------------------------------------------------------------------
                                                                *Keyboard:new()*
                           `Keyboard:new`({options})
a new keyboard object
Parameters~
{options} `(optional)` KeyboardDisplayOptions
Return~
Keyboard

------------------------------------------------------------------------------
Class~
{KeycodeHighlights}
Fields~
{keycode} `(string)` The neovim keycode to highlight
{highlight_group} `(string)` The highlight group for the highlighting

------------------------------------------------------------------------------
                                                          *Keyboard:highlight()*
                        `Keyboard:highlight`({keycodes})
buttons
keycodes KeycodeHighlights[] The keycodes to highlight

------------------------------------------------------------------------------
                                                          *Keyboard:get_lines()*
                     `Keyboard:get_lines`({shift_pressed})
lines
Parameters~
{shift_pressed} `(boolean)` Whether or not to return the shifted lines
Return~
`(string[])` The string representation of the keyboard

------------------------------------------------------------------------------
                                                         *Keyboard:__tostring()*
                            `Keyboard:__tostring`()
string representation
Return~
`(string)` The string representation of the keyboard

------------------------------------------------------------------------------
                                                    *Keyboard:_layout_buttons()*
                  `Keyboard:_layout_buttons`({shift_pressed})
the keyboard laout
Parameters~
{shift_pressed} `(boolean)` Whether or not the shift button is held down
Return~
`(string[])` The string representation of the keyboard

------------------------------------------------------------------------------
                                             *Keyboard:get_keycap_at_position()*
                `Keyboard:get_keycap_at_position`({row}, {col})
button at coordinates
Parameters~
{row} `(integer)`
{col} `(integer)`
Return~
Button ret the button at the position

------------------------------------------------------------------------------
                                                     *Keyboard:populate_lines()*
                   `Keyboard:populate_lines`({ui}, {keycaps})
lines in a display
Parameters~
{ui} KeySeerUI The UI to display to
{keycaps} KeyMapTreeNode The keycaps to display
Return~
`(number)` height The height of the window
Return~
`(number)` width The width of the window


==============================================================================
------------------------------------------------------------------------------
Class~
{HighlightBox}
Fields~
{start_col} `(number)` The start column
{end_col} `(number)` The end column
{start_row} `(number)` The start row
{end_row} `(number)` The end row

------------------------------------------------------------------------------
Class~
{PaddingBox}
Fields~
{left_pad} `(number)` The number of spaces to the left of the keycap string
{right_pad} `(number)` The number of spaces to the right of the keycap string
{top_pad} `(number)` The number of blank lines above the keycap string
{bottom_pad} `(number)` The number of blank lines below the keycap string

------------------------------------------------------------------------------
Class~
{BoundingBox}
Fields~
{left} `(number)` The number of spaces to the left of the keycap string
{right} `(number)` The number of spaces to the right of the keycap string
{top} `(number)` The number of blank lines above the keycap string
{bottom} `(number)` The number of blank lines below the keycap string

------------------------------------------------------------------------------
                                                                        *Button*
                                    `Button`
Class~
{Button}
Fields~
{keycap} `(string)` The string printed on the button
{keycode} `(string)` The neovim key
{left_pad} `(number)` The number of spaces to the left of the keycap
{right_pad} `(number)` The number of spaces to the right of the keycap
{row} `(number)` The row of the string on the output
{top_row} `(number)` The top row of the button in the output
{bottom_row} `(number)` The bottom row of the button on the output
{left_col} `(number)` The leftmost column of the button in the output
{right_col} `(number)` The rightmost column of the button in the output
{highlight_box} HighlightBox The highlight box for the button
{width} `(number)` The width of the entire button
{is_modifier} `(boolean)` Whether or not a button is a modifier
{private} _keycap_width `(number)` The width of the keycap string
{private} _highlights BoundingBox the highlight padding around the keycap
{private} _padding BoundingBox the display padding around the keycap

------------------------------------------------------------------------------
                                                                  *Button:new()*
 `Button:new`({keycap}, {keycode}, {row_index}, {padding_box}, {highlight_box})
a new button object
Parameters~
{keycap} `(string)` The string that gets rendered on screen
{keycode} `(string)` The neovim key
{row_index} `(number)` The row for the button
{padding_box} PaddingBox the padding around the keycap
{highlight_box} PaddingBox the highlight padding around the keycap
Return~
Button

------------------------------------------------------------------------------
                                                           *Button:__tostring()*
                             `Button:__tostring`()
string representation of a button
Return~
`(string)`

------------------------------------------------------------------------------
                                                          *Button:add_padding()*
                 `Button:add_padding`({padding}, {shift_left})
padding to a button
Parameters~
{padding} `(number)` The amount of padding to add

------------------------------------------------------------------------------
                                                       *Button:get_highlights()*
                           `Button:get_highlights`()
highlight details
Return~
`(number)` start_col The byte start column for highlights
Return~
`(number)` end_col The byte end column for highlights
Return~
`(number)` start_row The start row for highlights
Return~
`(number)` end_row The end row for highlights

------------------------------------------------------------------------------
                                             *Button:set_button_byte_position()*
                    `Button:set_button_byte_position`({col})
button position in layout
Parameters~
{col} `(number)` The column for the button to start

------------------------------------------------------------------------------
                                                 *Button:set_button_start_col()*
                      `Button:set_button_start_col`({col})
the start column for the button
Parameters~
{col} `(integer)` The start column

------------------------------------------------------------------------------
                                                            *Button:highlight()*
   `Button:highlight`({bufnr}, {namespace}, {highlight_group}, {row_offset})
a buffer
Parameters~
{bufnr} buffer A buffer
{namespace} `(number)` The namespace for the highlights
{highlight_group} `(string)` The highlighting to apply to the button
{row_offset} `(number)` The row offset in case there's something above the row (like a header)


==============================================================================
------------------------------------------------------------------------------
                                                                *BuiltInKeyMaps*
                                `BuiltInKeyMaps`
This file contains the code for parsing keymaps

------------------------------------------------------------------------------
                                                                       *Keymaps*
                                   `Keymaps`
Class~
{Keymaps}
Fields~
{root} KeyMapTreeNode The root of the keymap treenode
{current_node} KeyMapTreeNode The current node of the keymap tree
{stack} `(table<KeyMapTreeNode>)` The previous node of the keymap tree

------------------------------------------------------------------------------
                                                                 *Keymaps:new()*
                                `Keymaps:new`()
a new keymaps instance

------------------------------------------------------------------------------
                                                     *Keymaps:process_keymaps()*
                   `Keymaps:process_keymaps`({bufnr}, {mode})
a tree of keymaps
Parameters~
{bufnr} buffer? The buffer for which to get keymaps
{mode} `(string?)` Optional mode for which to get keymaps
table

------------------------------------------------------------------------------
Class~
{KeySeerKeyMap}
Fields~
{lhs} `(string)` The full lhs of the keymap
{rhs} `(string)` The rhs of the keymap
{desc} `(string?)` The description of the keymap
{noremap} `(boolean)` If the rhs is remappable
{silent} `(boolean)` If the keymap is silent
{nowait} `(boolean)` If the keymap waits for other, longer mappings

------------------------------------------------------------------------------
Class~
{KeyMapTreeNode}
Fields~
{keymaps} `(table<KeySeerKeyMap>)`
{modifiers} `(table<string,boolean>)`
{children} `(table<KeyMapTreeNode>)`

------------------------------------------------------------------------------
Class~
{KeyCapTreeNode}
Fields~
{keymaps} `(table<KeySeerKeyMap>)`
{modifiers} `(table<string,boolean>)`
{children} `(table<KeyCapTreeNode>)`

------------------------------------------------------------------------------
                                                         *Keymaps:add_keymaps()*
                        `Keymaps:add_keymaps`({keymaps})
A function that takes a list of keymaps as input and creates a table with the specified structure.
Convert a keymap from lhs = rhs to a KeyMapTreeNode true
Parameters~
{keymaps} `(table[]:)` A list of keymaps.

------------------------------------------------------------------------------
                                                   *Keymaps.matching_keypress()*
                `Keymaps.matching_keypress`({node}, {modifiers})
a boolean for whether or not the keypress matches the modifiers
Parameters~
{node} KeyMapTreeNode
{modifiers} `(table<string,boolean>)`

------------------------------------------------------------------------------
                                                 *Keymaps:get_current_keycaps()*
               `Keymaps:get_current_keycaps`({modifiers}, {opts})
the keycaps at the current node
Return~
`(table<KeyCapTreeNode>)`

------------------------------------------------------------------------------
                                              *Keymaps:get_current_keypresses()*
                       `Keymaps:get_current_keypresses`()
the key presses for the current node
Return~
`(table<KeyCapTreeNode>)`

------------------------------------------------------------------------------
                                                                *Keymaps:push()*
                           `Keymaps:push`({keypress})
the current node

------------------------------------------------------------------------------
                                                           *Keymaps:add_stats()*
                           `Keymaps:add_stats`({ui})
keymap statistics in a display
Parameters~
{ui} KeySeerUI The UI to display to

------------------------------------------------------------------------------
                                                         *Keymaps:get_keymaps()*
                 `Keymaps:get_keymaps`({keycode}, {modifiers})
the list of keymaps for the keycode provided
Parameters~
{keycode} `(string)` The keycode of the button
{modifiers} `(table<string,boolean>)` The modifier states


==============================================================================
------------------------------------------------------------------------------
                                                                      *Keypress*
                                   `Keypress`
Class~
{Keypress}
Fields~
{keystring} `(string)` The string of keys for a key press
{modifiers} `(table<string,boolean>)` The table of modifiers

------------------------------------------------------------------------------
                                                                *Keypress.new()*
                          `Keypress.new`({keystring})
Parameters~
{keystring} `(string)` The keystring to be parsed
Return~
Keypress

------------------------------------------------------------------------------
                                                      *Keypress.get_modifiers()*
                     `Keypress.get_modifiers`({keystring})
Parameters~
{keystring} `(string)` The keystring to extract modifiers from
Return~
`(table<string,boolean>)`

------------------------------------------------------------------------------
                                                        *Keypress.get_keycode()*
                      `Keypress.get_keycode`({keystring})
Parameters~
{keystring} `(string)` The keystring to find the keycode
Return~
`(string)` keycode The found keycode or empty string if none found.


==============================================================================
------------------------------------------------------------------------------
                                                                 *default_state*
                                `default_state`
Class~
{KeySeerUIState}
Fields~
{pane} `(string)` Which pane to show
{prev_pane} `(string)` The previous pane shown
{keyboard} Keyboard The keyboard object
{keymaps} Keymaps The keymaps
{current_keymaps} `(table<string>)` The keymaps that have been added
{mode} `(string)` The mode for displaying keymaps
{modifiers} `(table{string,boolean})` What modifier buttons are considered pressed
{bufnr} `(buffer|nil)` The buffer

------------------------------------------------------------------------------
                                                                     *KeySeerUI*
                                  `KeySeerUI`
Class~
{KeySeerUI:} KeySeerPopup
Fields~
{render} KeySeerRender
{state} KeySeerUIState

------------------------------------------------------------------------------
                                                              *KeySeerUI.show()*
                   `KeySeerUI.show`({pane}, {mode}, {bufnr})
the KeySeer UI
Parameters~
{pane} `(optional)` `(string)` The starting pane
{mode} `(optional)` `(string)` The neovim mode for keymaps
{bufnr} `(optional)` `(integer)` The buffer for keymaps

------------------------------------------------------------------------------
Type~
KeySeerUI


==============================================================================
------------------------------------------------------------------------------
Type~
`(table<string,table>)`


==============================================================================
------------------------------------------------------------------------------
UI Configuration

------------------------------------------------------------------------------
Class~
{KeySeerUIPane}
Fields~
{id} `(number)`
{button} `(optional)` `(boolean)`
{desc} `(optional)` `(string)`
{key} `(optional)` `(string)`
{toggle} `(optional)` `(boolean)`

------------------------------------------------------------------------------
                                                                       *M.panes*
                                   `M.panes`
Type~
`(table<string,KeySeerUIPane>)`


==============================================================================
------------------------------------------------------------------------------
Class~
{KeySeerPopupOptions}
Fields~
{buf} `(optional)` `(number)`
{margin} `(optional)` `({top?:number,)` right?:number, bottom?:number, left?:number}
{size} `(optional)` `({width:number,)` height:number}
{zindex} `(optional)` `(number)`
{style} `(optional)` "" | "minimal"
{border} `(optional)` "none" | "single" | "double" | "rounded" | "solid" | "shadow"
{title} `(optional)` `(string)`
{title_pos} `(optional)` "center" | "left" | "right"
{persistent} `(optional)` `(boolean)`
{ft} `(optional)` `(string)`
{noautocmd} `(optional)` `(boolean)`

------------------------------------------------------------------------------
Class~
{KeySeerPopup}
Fields~
{buf} `(number)`
{win} `(number)`
{opts} KeySeerPopupOptions

------------------------------------------------------------------------------
                                                                   *Popup.new()*
                              `Popup.new`({opts})
a new Popup
Parameters~
{opts} `(optional)` KeySeerPopupOptions

------------------------------------------------------------------------------
                                                                  *Popup:init()*
                              `Popup:init`({opts})
Parameters~
{opts} `(optional)` KeySeerPopupOptions

------------------------------------------------------------------------------
                                                                    *Popup:on()*
                       `Popup:on`({events}, {fn}, {opts})
Parameters~
{events} `(string|string[])`
{fn} `(fun(self?):boolean?)`
{opts} `(optional)` `(table)`

------------------------------------------------------------------------------
                                                                *Popup:on_key()*
                      `Popup:on_key`({key}, {fn}, {desc})
Parameters~
{key} `(string)`
{fn} `(fun(self?))`
{desc} `(optional)` `(string)`

------------------------------------------------------------------------------
                                                                 *Popup:close()*
                             `Popup:close`({opts})
Parameters~
{opts} `(optional)` `({wipe:boolean})`


==============================================================================
------------------------------------------------------------------------------
                                                           *KeySeerRender.new()*
                           `KeySeerRender.new`({ui})
Return~
KeySeerRender
Parameters~
{ui} KeySeerUI


==============================================================================
------------------------------------------------------------------------------
                                                                          *Text*
                                     `Text`
Class~
{Text}
Fields~
{_lines} {str: `(string,)` hl?:string|Extmark}[][]
{padding} `(number)`

------------------------------------------------------------------------------
                                                                 *Text:append()*
                       `Text:append`({str}, {hl}, {opts})
Parameters~
{str} `(string)`
{hl} `(optional)` `(string|{hl_group?:string,)` col?:number, end_col?:number}
{opts} `(optional)` {indent?: `(number,)` prefix?: string}

------------------------------------------------------------------------------
                                                              *Text:highlight()*
                          `Text:highlight`({patterns})
Parameters~
{patterns} `(table<string,string>)`


==============================================================================
------------------------------------------------------------------------------
                                                                  *M.on_enter()*
                               `M.on_enter`({ui})
keymaps when entering the pane

------------------------------------------------------------------------------
                                                                   *M.on_exit()*
                               `M.on_exit`({ui})
keymaps when exiting the pane


 vim:tw=78:ts=8:noet:ft=help:norl: